Search.setIndex({"docnames": ["generators/directed", "generators/undirected", "index", "mechanisms", "statistics"], "filenames": ["generators/directed.rst", "generators/undirected.rst", "index.rst", "mechanisms.rst", "statistics.rst"], "titles": ["Directed Graphs", "Undirected Graphs", "Network Inequality", "Mechanisms", "Statistics"], "terms": {"class": [0, 1, 3], "netin": [0, 1, 2, 3, 4], "digraph": [0, 2], "n": [0, 1, 3], "int": [0, 1, 3], "f_m": [0, 1, 3], "float": [0, 1, 3, 4], "d": 0, "plo_m": 0, "seed": [0, 1, 3], "object": [0, 1, 3], "none": [0, 1, 3], "base": [0, 1, 2, 3], "model": [0, 1, 3], "number": [0, 1, 3], "node": [0, 1, 3], "minimum": [0, 1, 3], "2": [0, 1], "edg": [0, 1, 3], "densiti": [0, 4], "0": [0, 1, 3], "maximum": [0, 1, 3], "1": [0, 1, 3], "fraction": [0, 1, 3], "minor": [0, 1, 3], "activ": [0, 1], "out": 0, "degre": [0, 1], "power": 0, "law": 0, "expon": 0, "major": [0, 1, 3], "group": 0, "random": [0, 1, 3], "gener": [0, 1], "The": [0, 1, 4], "initi": [0, 1], "i": [0, 1, 2], "sourc": [0, 1, 3], "ar": [0, 1], "select": [0, 1], "given": [0, 1], "see": [0, 1], "target": [0, 1, 3], "depend": [0, 1], "chosen": [0, 1], "mechan": [0, 1, 2], "format": 0, "dpah": [0, 1, 2], "preferenti": [0, 1, 3], "attach": [0, 1, 3], "homophili": [0, 1, 2, 3], "h": 0, "dpa": [0, 1, 2], "dh": [0, 1, 2], "l": [0, 1], "esp\u00edn": [0, 1], "noboa": [0, 1], "c": [0, 1], "wagner": [0, 1], "m": [0, 1], "strohmaier": [0, 1], "f": [0, 1], "karimi": [0, 1], "inequ": [0, 1], "network": [0, 1], "rank": [0, 1, 2, 4], "recommend": [0, 1], "algorithm": [0, 1], "scientif": [0, 1], "report": [0, 1], "12": [0, 1], "14": [0, 1], "2022": [0, 1], "calculate_in_degree_powerlaw_expon": 0, "tupl": [0, 1, 3, 4], "distribut": [0, 4], "calculate_out_degree_powerlaw_expon": 0, "fit_powerlaw": 0, "metric": [0, 1], "str": [0, 1, 4], "fit": 0, "powerlaw": 0, "A": [0, 1, 3], "grown": 0, "new": [0, 1], "randomli": 0, "replac": 0, "each": [0, 1, 3], "drawn": 0, "h_mm": [0, 1, 3], "5": 0, "ba": [0, 1], "erdo": [0, 1, 3], "renyi": [0, 1, 3], "get_activity_distribut": 0, "arrai": [0, 1, 3, 4], "all": 0, "np": [0, 1, 3, 4], "get_expected_dens": 0, "expect": [0, 1], "input": [0, 1, 4], "get_expected_number_of_edg": 0, "get_expected_powerlaw_out_degree_major": 0, "get_expected_powerlaw_out_degree_minor": 0, "get_metadata_as_dict": [0, 1, 3], "dict": [0, 1, 3], "metadata": [0, 1, 3], "get_sourc": 0, "sampl": 0, "us": [0, 1, 3], "ha": 0, "length": 0, "probabl": [0, 1, 3, 4], "its": 0, "get_target": [0, 3], "edge_list": 0, "kwarg": [0, 1], "dictionari": [0, 1, 3], "addit": [0, 1], "union": [0, 1], "get_target_prob": [0, 1, 3], "target_set": [0, 1, 3], "set": [0, 1, 2, 3], "special_target": [0, 1, 3], "iter": [0, 1, 3], "connect": [0, 1, 3], "It": [0, 1, 2, 3], "follow": [0, 1, 3], "an": [0, 1, 3], "id": [0, 1, 3], "here": [0, 1, 3], "special": [0, 1, 3], "consid": [0, 1, 3], "p": [0, 1, 3], "erd\u0151": [0, 1, 3], "r\u00e9nyi": [0, 1, 3], "On": [0, 1, 3], "publ": [0, 1, 3], "math": [0, 1, 3], "6": [0, 1, 3], "290": [0, 1, 3], "1959": [0, 1, 3], "info_comput": [0, 1], "show": [0, 1], "comput": [0, 1, 4], "properti": [0, 1], "info_param": [0, 1], "creat": [0, 1], "instanc": [0, 1], "within": 0, "where": [0, 1], "via": [0, 1], "thi": [0, 1], "which": [0, 4], "version": 0, "g\u00e9noi": [0, 1], "singer": [0, 1], "influenc": [0, 1], "social": [0, 1, 2], "8": [0, 1], "11077": [0, 1], "2018": [0, 1], "from": [0, 1], "e": [0, 1, 2], "between": [0, 1, 3], "infer_homophily_valu": [0, 1], "infer": [0, 1, 2], "level": [0, 1], "analyt": [0, 1], "bi": 1, "popul": 1, "one": 1, "direct": [1, 2], "avail": 1, "pa": [1, 2], "h_": 1, "pah": [1, 2], "triadic": [1, 3], "closur": [1, 3], "tc": [1, 3], "patc": [1, 2], "3": 1, "patch": [1, 2], "4": 1, "barabasi": 1, "r": 1, "albert": 1, "emerg": 1, "scale": 1, "scienc": 1, "286": 1, "pp": 1, "509": 1, "512": 1, "1999": 1, "holm": 1, "b": 1, "j": 1, "kim": 1, "grow": 1, "free": 1, "tunabl": 1, "cluster": 1, "phy": 1, "rev": 1, "2002": 1, "calculate_fraction_of_minor": 1, "attribut": [1, 3], "calculate_minimum_degre": 1, "compute_node_stat": 1, "list": 1, "count_edges_typ": 1, "counter": 1, "type": 1, "g": [1, 2], "mm": 1, "majorii": 1, "etc": 1, "basic": 1, "instruct": 1, "run": 1, "befor": 1, "get_class_attribut": 1, "name": [1, 3, 4], "get_class_label": 1, "label": [1, 3], "map": 1, "valu": [1, 3, 4], "get_class_valu": 1, "under": 1, "get_expected_fraction_of_minor": 1, "get_expected_number_of_nod": 1, "get_majority_label": 1, "get_majority_valu": 1, "includ": [1, 3], "get_minority_label": 1, "get_minority_valu": 1, "get_model_nam": 1, "get_node_metadata_as_datafram": 1, "include_graph_metadata": 1, "bool": 1, "fals": 1, "n_job": 1, "datafram": [1, 4], "everi": 1, "row": 1, "repres": 1, "column": [1, 4], "whether": 1, "parallel": 1, "job": 1, "pd": [1, 4], "get_potential_nodes_to_connect": 1, "potenti": [1, 3], "These": 1, "alreadi": 1, "get_se": 1, "numpi": [1, 3, 4], "info": 1, "propoerti": 1, "set_class_attribut": 1, "class_attribut": 1, "set_class_label": 1, "class_label": 1, "set_class_valu": 1, "class_valu": 1, "identifi": 1, "set_expected_fraction_of_minor": 1, "set_expected_number_of_nod": 1, "set_model_nam": 1, "model_nam": 1, "set_se": 1, "k": 1, "get_special_target": [1, 3], "empti": [1, 3], "newli": [1, 3], "ad": [1, 3], "similar": [1, 3], "Then": 1, "everytim": 1, "get": 1, "known": 1, "homopolili": 1, "analut": 1, "solut": 1, "close": 1, "triad": 1, "triadicclosur": [1, 2, 3], "get_target_probabilities_regular": 1, "ndarrai": [1, 4], "infer_triadic_closur": 1, "python": 2, "packag": 2, "analysi": 2, "networkx": 2, "provid": 2, "function": 2, "studi": 2, "graph": [2, 3], "undirect": 2, "statist": 2, "get_pdf": [2, 4], "gini": [2, 4], "index": 2, "modul": 2, "search": 2, "page": 2, "pick": 3, "dynam": 3, "should": 3, "get_triadic_closur": 3, "set_triadic_closur": 3, "get_homophily_major": 3, "get_homophily_minor": 3, "set_homophily_major": 3, "set_homophily_minor": 3, "stat": 4, "df": 4, "x": 4, "total": 4, "data": 4, "contain": 4, "amount": 4, "normal": 4, "two": 4, "hold": 4, "calcul": 4, "coeffici": 4}, "objects": {"": [[2, 0, 0, "-", "netin"]], "netin": [[0, 1, 1, "", "DH"], [0, 1, 1, "", "DPA"], [0, 1, 1, "", "DPAH"], [0, 1, 1, "", "DiGraph"], [1, 1, 1, "", "Graph"], [3, 1, 1, "", "Homophily"], [1, 1, 1, "", "PA"], [1, 1, 1, "", "PAH"], [1, 1, 1, "", "PATC"], [1, 1, 1, "", "PATCH"], [3, 1, 1, "", "TriadicClosure"]], "netin.DH": [[0, 2, 1, "", "get_target_probabilities"], [0, 2, 1, "", "info_computed"], [0, 2, 1, "", "info_params"]], "netin.DPA": [[0, 2, 1, "", "get_target_probabilities"]], "netin.DPAH": [[0, 2, 1, "", "get_target_probabilities"], [0, 2, 1, "", "infer_homophily_values"], [0, 2, 1, "", "info_computed"], [0, 2, 1, "", "info_params"]], "netin.DiGraph": [[0, 2, 1, "", "calculate_in_degree_powerlaw_exponents"], [0, 2, 1, "", "calculate_out_degree_powerlaw_exponents"], [0, 2, 1, "", "fit_powerlaw"], [0, 2, 1, "", "generate"], [0, 2, 1, "", "get_activity_distribution"], [0, 2, 1, "", "get_expected_density"], [0, 2, 1, "", "get_expected_number_of_edges"], [0, 2, 1, "", "get_expected_powerlaw_out_degree_majority"], [0, 2, 1, "", "get_expected_powerlaw_out_degree_minority"], [0, 2, 1, "", "get_metadata_as_dict"], [0, 2, 1, "", "get_sources"], [0, 2, 1, "", "get_target"], [0, 2, 1, "", "get_target_probabilities"], [0, 2, 1, "", "info_computed"], [0, 2, 1, "", "info_params"]], "netin.Graph": [[1, 2, 1, "", "calculate_fraction_of_minority"], [1, 2, 1, "", "calculate_minimum_degree"], [1, 2, 1, "", "compute_node_stats"], [1, 2, 1, "", "count_edges_types"], [1, 2, 1, "", "generate"], [1, 2, 1, "", "get_class_attribute"], [1, 2, 1, "", "get_class_label"], [1, 2, 1, "", "get_class_labels"], [1, 2, 1, "", "get_class_value"], [1, 2, 1, "", "get_class_values"], [1, 2, 1, "", "get_expected_fraction_of_minorities"], [1, 2, 1, "", "get_expected_number_of_nodes"], [1, 2, 1, "", "get_majority_label"], [1, 2, 1, "", "get_majority_value"], [1, 2, 1, "", "get_metadata_as_dict"], [1, 2, 1, "", "get_minority_label"], [1, 2, 1, "", "get_minority_value"], [1, 2, 1, "", "get_model_name"], [1, 2, 1, "", "get_node_metadata_as_dataframe"], [1, 2, 1, "", "get_potential_nodes_to_connect"], [1, 2, 1, "", "get_seed"], [1, 2, 1, "", "get_target_probabilities"], [1, 2, 1, "", "info"], [1, 2, 1, "", "set_class_attribute"], [1, 2, 1, "", "set_class_labels"], [1, 2, 1, "", "set_class_values"], [1, 2, 1, "", "set_expected_fraction_of_minorities"], [1, 2, 1, "", "set_expected_number_of_nodes"], [1, 2, 1, "", "set_model_name"], [1, 2, 1, "", "set_seed"]], "netin.Homophily": [[3, 2, 1, "", "get_homophily_majority"], [3, 2, 1, "", "get_homophily_minority"], [3, 2, 1, "", "get_metadata_as_dict"], [3, 2, 1, "", "get_target"], [3, 2, 1, "", "get_target_probabilities"], [3, 2, 1, "", "set_homophily_majority"], [3, 2, 1, "", "set_homophily_minority"]], "netin.PA": [[1, 2, 1, "", "get_target_probabilities"]], "netin.PAH": [[1, 2, 1, "", "get_metadata_as_dict"], [1, 2, 1, "", "get_target_probabilities"], [1, 2, 1, "", "infer_homophily_values"], [1, 2, 1, "", "info_computed"], [1, 2, 1, "", "info_params"]], "netin.PATC": [[1, 2, 1, "", "get_metadata_as_dict"], [1, 2, 1, "", "get_special_targets"], [1, 2, 1, "", "get_target_probabilities"], [1, 2, 1, "", "info_params"]], "netin.PATCH": [[1, 2, 1, "", "get_metadata_as_dict"], [1, 2, 1, "", "get_special_targets"], [1, 2, 1, "", "get_target_probabilities"], [1, 2, 1, "", "get_target_probabilities_regular"], [1, 2, 1, "", "infer_homophily_values"], [1, 2, 1, "", "infer_triadic_closure"], [1, 2, 1, "", "info_computed"], [1, 2, 1, "", "info_params"]], "netin.TriadicClosure": [[3, 2, 1, "", "get_metadata_as_dict"], [3, 2, 1, "", "get_special_targets"], [3, 2, 1, "", "get_target"], [3, 2, 1, "", "get_target_probabilities"], [3, 2, 1, "", "get_triadic_closure"], [3, 2, 1, "", "set_triadic_closure"]], "netin.stats": [[4, 0, 0, "-", "distributions"], [4, 0, 0, "-", "ranking"]], "netin.stats.distributions": [[4, 3, 1, "", "get_pdf"]], "netin.stats.ranking": [[4, 3, 1, "", "gini"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"direct": 0, "graph": [0, 1], "paramet": [0, 1, 3, 4], "note": [0, 1], "refer": [0, 1, 3], "return": [0, 1, 3, 4], "undirect": 1, "network": 2, "inequ": 2, "content": 2, "indic": 2, "tabl": 2, "mechan": 3, "statist": 4}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Directed Graphs": [[0, "directed-graphs"]], "Parameters": [[0, "parameters"], [0, "id2"], [0, "id11"], [0, "id13"], [0, "id16"], [0, "id19"], [0, "id22"], [0, "id25"], [1, "parameters"], [1, "id2"], [1, "id6"], [1, "id9"], [1, "id20"], [1, "id22"], [1, "id25"], [1, "id28"], [1, "id29"], [1, "id30"], [1, "id31"], [1, "id32"], [1, "id33"], [1, "id34"], [1, "id35"], [1, "id38"], [1, "id40"], [1, "id43"], [1, "id47"], [1, "id51"], [1, "id55"], [1, "id57"], [1, "id59"], [3, "parameters"], [3, "id2"], [3, "id4"], [3, "id7"], [3, "id11"], [3, "id13"], [3, "id16"], [3, "id17"], [4, "parameters"]], "Notes": [[0, "notes"], [0, "id23"], [1, "notes"], [1, "id44"], [1, "id52"]], "References": [[0, "references"], [0, "id4"], [0, "id15"], [0, "id18"], [0, "id21"], [0, "id24"], [1, "references"], [1, "id27"], [1, "id37"], [1, "id42"], [1, "id45"], [1, "id50"], [1, "id53"], [3, "references"], [3, "id15"]], "Returns": [[0, "returns"], [0, "id1"], [0, "id3"], [0, "id5"], [0, "id6"], [0, "id7"], [0, "id8"], [0, "id9"], [0, "id10"], [0, "id12"], [0, "id14"], [0, "id17"], [0, "id20"], [0, "id26"], [0, "id27"], [1, "returns"], [1, "id1"], [1, "id3"], [1, "id4"], [1, "id5"], [1, "id7"], [1, "id8"], [1, "id10"], [1, "id11"], [1, "id12"], [1, "id13"], [1, "id14"], [1, "id15"], [1, "id16"], [1, "id17"], [1, "id18"], [1, "id19"], [1, "id21"], [1, "id23"], [1, "id24"], [1, "id26"], [1, "id36"], [1, "id39"], [1, "id41"], [1, "id46"], [1, "id48"], [1, "id49"], [1, "id54"], [1, "id56"], [1, "id58"], [1, "id60"], [1, "id61"], [1, "id62"], [3, "returns"], [3, "id1"], [3, "id3"], [3, "id5"], [3, "id6"], [3, "id8"], [3, "id9"], [3, "id10"], [3, "id12"], [3, "id14"], [4, "returns"]], "Undirected Graphs": [[1, "undirected-graphs"]], "Network Inequality": [[2, "module-netin"]], "Contents:": [[2, null]], "Indices and tables": [[2, "indices-and-tables"]], "Mechanisms": [[3, "mechanisms"]], "Statistics": [[4, "module-netin.stats.distributions"]]}, "indexentries": {"dh (class in netin)": [[0, "netin.DH"]], "dpa (class in netin)": [[0, "netin.DPA"]], "dpah (class in netin)": [[0, "netin.DPAH"]], "digraph (class in netin)": [[0, "netin.DiGraph"]], "calculate_in_degree_powerlaw_exponents() (netin.digraph method)": [[0, "netin.DiGraph.calculate_in_degree_powerlaw_exponents"]], "calculate_out_degree_powerlaw_exponents() (netin.digraph method)": [[0, "netin.DiGraph.calculate_out_degree_powerlaw_exponents"]], "fit_powerlaw() (netin.digraph method)": [[0, "netin.DiGraph.fit_powerlaw"]], "generate() (netin.digraph method)": [[0, "netin.DiGraph.generate"]], "get_activity_distribution() (netin.digraph method)": [[0, "netin.DiGraph.get_activity_distribution"]], "get_expected_density() (netin.digraph method)": [[0, "netin.DiGraph.get_expected_density"]], "get_expected_number_of_edges() (netin.digraph method)": [[0, "netin.DiGraph.get_expected_number_of_edges"]], "get_expected_powerlaw_out_degree_majority() (netin.digraph method)": [[0, "netin.DiGraph.get_expected_powerlaw_out_degree_majority"]], "get_expected_powerlaw_out_degree_minority() (netin.digraph method)": [[0, "netin.DiGraph.get_expected_powerlaw_out_degree_minority"]], "get_metadata_as_dict() (netin.digraph method)": [[0, "netin.DiGraph.get_metadata_as_dict"]], "get_sources() (netin.digraph method)": [[0, "netin.DiGraph.get_sources"]], "get_target() (netin.digraph method)": [[0, "netin.DiGraph.get_target"]], "get_target_probabilities() (netin.dh method)": [[0, "netin.DH.get_target_probabilities"]], "get_target_probabilities() (netin.dpa method)": [[0, "netin.DPA.get_target_probabilities"]], "get_target_probabilities() (netin.dpah method)": [[0, "netin.DPAH.get_target_probabilities"]], "get_target_probabilities() (netin.digraph method)": [[0, "netin.DiGraph.get_target_probabilities"]], "infer_homophily_values() (netin.dpah method)": [[0, "netin.DPAH.infer_homophily_values"]], "info_computed() (netin.dh method)": [[0, "netin.DH.info_computed"]], "info_computed() (netin.dpah method)": [[0, "netin.DPAH.info_computed"]], "info_computed() (netin.digraph method)": [[0, "netin.DiGraph.info_computed"]], "info_params() (netin.dh method)": [[0, "netin.DH.info_params"]], "info_params() (netin.dpah method)": [[0, "netin.DPAH.info_params"]], "info_params() (netin.digraph method)": [[0, "netin.DiGraph.info_params"]], "graph (class in netin)": [[1, "netin.Graph"]], "pa (class in netin)": [[1, "netin.PA"]], "pah (class in netin)": [[1, "netin.PAH"]], "patc (class in netin)": [[1, "netin.PATC"]], "patch (class in netin)": [[1, "netin.PATCH"]], "calculate_fraction_of_minority() (netin.graph method)": [[1, "netin.Graph.calculate_fraction_of_minority"]], "calculate_minimum_degree() (netin.graph method)": [[1, "netin.Graph.calculate_minimum_degree"]], "compute_node_stats() (netin.graph method)": [[1, "netin.Graph.compute_node_stats"]], "count_edges_types() (netin.graph method)": [[1, "netin.Graph.count_edges_types"]], "generate() (netin.graph method)": [[1, "netin.Graph.generate"]], "get_class_attribute() (netin.graph method)": [[1, "netin.Graph.get_class_attribute"]], "get_class_label() (netin.graph method)": [[1, "netin.Graph.get_class_label"]], "get_class_labels() (netin.graph method)": [[1, "netin.Graph.get_class_labels"]], "get_class_value() (netin.graph method)": [[1, "netin.Graph.get_class_value"]], "get_class_values() (netin.graph method)": [[1, "netin.Graph.get_class_values"]], "get_expected_fraction_of_minorities() (netin.graph method)": [[1, "netin.Graph.get_expected_fraction_of_minorities"]], "get_expected_number_of_nodes() (netin.graph method)": [[1, "netin.Graph.get_expected_number_of_nodes"]], "get_majority_label() (netin.graph method)": [[1, "netin.Graph.get_majority_label"]], "get_majority_value() (netin.graph method)": [[1, "netin.Graph.get_majority_value"]], "get_metadata_as_dict() (netin.graph method)": [[1, "netin.Graph.get_metadata_as_dict"]], "get_metadata_as_dict() (netin.pah method)": [[1, "netin.PAH.get_metadata_as_dict"]], "get_metadata_as_dict() (netin.patc method)": [[1, "netin.PATC.get_metadata_as_dict"]], "get_metadata_as_dict() (netin.patch method)": [[1, "netin.PATCH.get_metadata_as_dict"]], "get_minority_label() (netin.graph method)": [[1, "netin.Graph.get_minority_label"]], "get_minority_value() (netin.graph method)": [[1, "netin.Graph.get_minority_value"]], "get_model_name() (netin.graph method)": [[1, "netin.Graph.get_model_name"]], "get_node_metadata_as_dataframe() (netin.graph method)": [[1, "netin.Graph.get_node_metadata_as_dataframe"]], "get_potential_nodes_to_connect() (netin.graph method)": [[1, "netin.Graph.get_potential_nodes_to_connect"]], "get_seed() (netin.graph method)": [[1, "netin.Graph.get_seed"]], "get_special_targets() (netin.patc method)": [[1, "netin.PATC.get_special_targets"]], "get_special_targets() (netin.patch method)": [[1, "netin.PATCH.get_special_targets"]], "get_target_probabilities() (netin.graph method)": [[1, "netin.Graph.get_target_probabilities"]], "get_target_probabilities() (netin.pa method)": [[1, "netin.PA.get_target_probabilities"]], "get_target_probabilities() (netin.pah method)": [[1, "netin.PAH.get_target_probabilities"]], "get_target_probabilities() (netin.patc method)": [[1, "netin.PATC.get_target_probabilities"]], "get_target_probabilities() (netin.patch method)": [[1, "netin.PATCH.get_target_probabilities"]], "get_target_probabilities_regular() (netin.patch method)": [[1, "netin.PATCH.get_target_probabilities_regular"]], "infer_homophily_values() (netin.pah method)": [[1, "netin.PAH.infer_homophily_values"]], "infer_homophily_values() (netin.patch method)": [[1, "netin.PATCH.infer_homophily_values"]], "infer_triadic_closure() (netin.patch method)": [[1, "netin.PATCH.infer_triadic_closure"]], "info() (netin.graph method)": [[1, "netin.Graph.info"]], "info_computed() (netin.pah method)": [[1, "netin.PAH.info_computed"]], "info_computed() (netin.patch method)": [[1, "netin.PATCH.info_computed"]], "info_params() (netin.pah method)": [[1, "netin.PAH.info_params"]], "info_params() (netin.patc method)": [[1, "netin.PATC.info_params"]], "info_params() (netin.patch method)": [[1, "netin.PATCH.info_params"]], "set_class_attribute() (netin.graph method)": [[1, "netin.Graph.set_class_attribute"]], "set_class_labels() (netin.graph method)": [[1, "netin.Graph.set_class_labels"]], "set_class_values() (netin.graph method)": [[1, "netin.Graph.set_class_values"]], "set_expected_fraction_of_minorities() (netin.graph method)": [[1, "netin.Graph.set_expected_fraction_of_minorities"]], "set_expected_number_of_nodes() (netin.graph method)": [[1, "netin.Graph.set_expected_number_of_nodes"]], "set_model_name() (netin.graph method)": [[1, "netin.Graph.set_model_name"]], "set_seed() (netin.graph method)": [[1, "netin.Graph.set_seed"]], "module": [[2, "module-netin"], [4, "module-netin.stats.distributions"], [4, "module-netin.stats.ranking"]], "netin": [[2, "module-netin"]], "homophily (class in netin)": [[3, "netin.Homophily"]], "triadicclosure (class in netin)": [[3, "netin.TriadicClosure"]], "get_homophily_majority() (netin.homophily method)": [[3, "netin.Homophily.get_homophily_majority"]], "get_homophily_minority() (netin.homophily method)": [[3, "netin.Homophily.get_homophily_minority"]], "get_metadata_as_dict() (netin.homophily method)": [[3, "netin.Homophily.get_metadata_as_dict"]], "get_metadata_as_dict() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.get_metadata_as_dict"]], "get_special_targets() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.get_special_targets"]], "get_target() (netin.homophily method)": [[3, "netin.Homophily.get_target"]], "get_target() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.get_target"]], "get_target_probabilities() (netin.homophily method)": [[3, "netin.Homophily.get_target_probabilities"]], "get_target_probabilities() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.get_target_probabilities"]], "get_triadic_closure() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.get_triadic_closure"]], "set_homophily_majority() (netin.homophily method)": [[3, "netin.Homophily.set_homophily_majority"]], "set_homophily_minority() (netin.homophily method)": [[3, "netin.Homophily.set_homophily_minority"]], "set_triadic_closure() (netin.triadicclosure method)": [[3, "netin.TriadicClosure.set_triadic_closure"]], "get_pdf() (in module netin.stats.distributions)": [[4, "netin.stats.distributions.get_pdf"]], "gini() (in module netin.stats.ranking)": [[4, "netin.stats.ranking.gini"]], "netin.stats.distributions": [[4, "module-netin.stats.distributions"]], "netin.stats.ranking": [[4, "module-netin.stats.ranking"]]}})